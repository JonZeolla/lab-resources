---
- name: Ensure supported OS
  ansible.builtin.assert:
    that:
      - ansible_os_family in ['Debian', 'RedHat']
    fail_msg: "This playbook only supports Debian and RedHat based systems."
  run_once: true

- name: Run docker compose setup
  ansible.builtin.include_role:
    name: docker_compose

- name: Install homebrew
  ansible.builtin.include_role:
    name: homebrew

- name: Run gitlab via docker compose
  environment:
    CI_SERVER_URL: "{{ ci_server_url }}"
    RUNNER_NAME: "{{ runner_name }}"
    GITLAB_HOME: "{{ gitlab_home }}"
  block:
    - name: Transfer files
      ansible.builtin.copy:
        src: docker-compose.yml
        dest: "{{ gitlab_home_dir }}"
        mode: "0644"

    - name: Validate compose file
      ansible.builtin.command:
        argv:
          - /usr/local/bin/docker-compose
          - --file
          - "{{ gitlab_home_dir }}/docker-compose.yml"
          - config
          - --quiet
        chdir: "{{ gitlab_home_dir }}"
      changed_when: false

    - name: Pull container images
      ansible.builtin.command:
        argv:
          - /usr/local/bin/docker-compose
          - --file
          - "{{ gitlab_home_dir }}/docker-compose.yml"
          - pull
        chdir: "{{ gitlab_home_dir }}"
      register: compose_pull
      changed_when: "'Downloading' in compose_pull.stdout"

    - name: Start containers
      ansible.builtin.command:
        argv:
          - /usr/local/bin/docker-compose
          - --file
          - "{{ gitlab_home_dir }}/docker-compose.yml"
          - up
          - --detach
        chdir: "{{ gitlab_home_dir }}"
      register: compose_up
      changed_when: "'Started' in compose_up.stdout"

    - name: Retrieve the secret
      ansible.builtin.command: cat "$GITLAB_HOME/etc/initial_root_password"
      register: gitlab_login
      changed_when: "'Downloading' in compose_pull.stdout"

- name: Setup GitLab Runners
  ansible.builtin.command:
    argv:
      - /usr/local/bin/docker-compose
    chdir: "{{ gitlab_home_dir }}"
  changed_when: false
  environment:
    REGISTRATION_TOKEN: "{{ registration_token }}" # TODO: We need to get this dynamically.
